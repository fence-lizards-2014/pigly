<div class="restaurant_container">
  <h1 class="menu_head_text"><%= @restaurant.name %> </h1>

  <!-- Nav Bar Center Buttons -->
  <div id="tab-container" class="tab-container">
    <ul class='tab-bar' style="display:none;">
      <li class='tab'><a href="#menu-tab"></a></li>
      <li class='tab'><a href="#visualize-tab"></a></li>
      <li class='tab'><a href="#info-tab"></a></li>
    </ul>

    <!-- Restaurant 5 first Items -->
    <div id="menu-tab">
      <div class="menu_header">
       <h2>Menu</h2>
      </div>
      <% @top_five_items.each do |item| %>
        <%= div_for(item, class: "top_five_items") do %>
        <div class="votes">
          <% if logged_in? %>
            <% if current_user.votes.where(item_id: item.id, direction: "up").any? %>
              <%= link_to '', votes_path(direction: 'up', item_id: item.id), remote: true, method: 'post', id: 'upvote', class: 'ss-symbolicons-block ss-like' %>
            <% else %>
              <%= link_to '', votes_path(direction: 'up', item_id: item.id), remote: true, method: 'post', id: 'upvote', class: 'ss-like' %>
            <% end %>
            <span class="vote-holder"> <%= item.calculate_percentage %>%</span>
            <% if current_user.votes.where(item_id: item.id, direction: "down").any? %>
              <%= link_to '', votes_path(direction: 'down', item_id: item.id), remote: true, method: 'post', id: 'downvote', class: 'ss-symbolicons-block ss-dislike'%>
            <% else %>
              <%= link_to '', votes_path(direction: 'down', item_id: item.id), remote: true, method: 'post', id: 'downvote', class: 'ss-dislike'%>
            <% end %>
          <% else %>
              <%= link_to '', votes_path(direction: 'up', item_id: item.id), remote: true, method: 'post', id: 'upvote', class: 'ss-like' %>
              <span class="vote-holder"> <%= item.calculate_percentage %>%</span>
              <%= link_to '', votes_path(direction: 'down', item_id: item.id), remote: true, method: 'post', id: 'downvote', class: 'ss-dislike'%>
          <% end %>
          </div>
          <div class="item-info"><%= item.name %></div>
            <div class="open-text-box"><%= item.name %></div>
        <% end %>
      <% end %>

      <!-- Restaurant Rest of the Items on More -->
      <a class="show_all_items_btn" href="javascript:unhideItems()"><span class="slicknav_menutxt">MORE</span></a>
       <% @remaining_items.each do |item| %>
        <%= div_for(item, class: "remaining_items") do %>
         <div class="votes">
          <% if logged_in? %>
            <% if current_user.votes.where(item_id: item.id, direction: "up").any? %>
              <%= link_to '', votes_path(direction: 'up', item_id: item.id), remote: true, method: 'post', id: 'upvote', class: 'ss-symbolicons-block ss-like' %>
            <% else %>
              <%= link_to '', votes_path(direction: 'up', item_id: item.id), remote: true, method: 'post', id: 'upvote', class: 'ss-like' %>
            <% end %>
            <span class="vote-holder"> <%= item.calculate_percentage %>%</span>
            <% if current_user.votes.where(item_id: item.id, direction: "down").any? %>
              <%= link_to '', votes_path(direction: 'down', item_id: item.id), remote: true, method: 'post', id: 'downvote', class: 'ss-symbolicons-block ss-dislike'%>
            <% else %>
              <%= link_to '', votes_path(direction: 'down', item_id: item.id), remote: true, method: 'post', id: 'downvote', class: 'ss-dislike'%>
            <% end %>
          <% else %>
              <%= link_to '', votes_path(direction: 'up', item_id: item.id), remote: true, method: 'post', id: 'upvote', class: 'ss-like' %>
              <span class="vote-holder"> <%= item.calculate_percentage %>%</span>
              <%= link_to '', votes_path(direction: 'down', item_id: item.id), remote: true, method: 'post', id: 'downvote', class: 'ss-dislike'%>
          <% end %>
          </div>
          <div class="item-info" class="item-ellipse"><%= item.name %></div>
           <div class="open-text-box"><%= item.name %></div>
        <% end %>
      <% end %>
    </div>

    <!-- Restaurant Visualize -->
    <div id="visualize-tab">

      <p class="display_text">Pigglets' Favorite Items:</p>
      <div class="itemdisplay">
        <div class="itembox">
          <p id="visual-object-info"></p>
        </div>
      </div>

      <p class="display_text">How Pigglets Voted:</p>
      <div class="agedisplay">
        <div class="infobox">
          <p id="data-info"></p>
        </div>
      </div>

    </div>

    <!-- Restaurant Info -->
    <div id="info-tab">
      <div class="restaurant_info">
        <p class="restaurant_info_p">Address: <%= @restaurant.address %></p>
        <a href= "<%= @restaurant.website %>" ><p class="restaurant_info_p">Website: <%= @restaurant.website %></p></a>
        <p class="restaurant_info_p">Phone Number: <%= @restaurant.phone %></p>
      </div>
      <div id="map-canvas"/></div>
  </div>

</div>

<script type="text/javascript">
  function initialize() {
    var myLatlng = new google.maps.LatLng(<%= @restaurant.latitude %>,<%= @restaurant.longitude %>);
    var mapOptions = {
      center: myLatlng,
      zoom: 16,
      panControl: false,
      zoomControl: false,
      streetViewControl: false,
      mapTypeControl: false
    };
    map = new google.maps.Map(document.getElementById("map-canvas"),
        mapOptions);
    marker = new google.maps.Marker({
      position: myLatlng,
      map: map,
      title: 'Hello World!'
  });
  }
  google.maps.event.addDomListener(window, 'load', initialize);
</script>

<script type="text/javascript">

// ----- BUBBLE PLOT -----
// infobox code
// this will be ran whenever we mouse over a circle
var myMouseOverFunction = function() {
  var node = d3.select(this);
  // show infobox div on mouseover.
  // block means sorta "render on the page" whereas none would mean "don't render at all"
  d3.select(".infobox").style("display", "block");
  // add test to p tag in infobox
  d3.select("#data-info")
    .text("Pigglets at the age of " + this.__data__.age + " voted " + this.__data__.total_group_votes + " times. This age represents " + this.__data__.votes_percentage + "%  of the total votes of the '" + this.__data__.group + "' group.");
}

var myMouseOutFunction = function() {
  var circle = d3.select(this);
  // display none removes element totally, whereas visibilty in last example just hid it
  d3.select(".infobox").style("display", "none");
}

var ageWidth = 320,
    ageHeight = 300,
    agePadding = 1.5, // separation between same-color nodes
    ageClusterPadding = 6, // separation between different-color nodes
    ageMaxRadius = 50;


// what about creating a structure like this but jsonic style in order to do not perform any
// logic on the viualization side
var nodes_info = <%= raw @nodes_for_bubbles %>
var counter = 0

var n = nodes_info.length,  // total number of nodes
    m = 5;                        // number of distinct clusters for us age groups

var color = d3.scale.category20()
    .domain(d3.range(m));

// The largest node for each cluster.
var clusters = new Array(m);

var nodes = d3.range(n).map(function() {
  var i = nodes_info[counter].group_num;
  var age = nodes_info[counter].age;
  var percentage = nodes_info[counter].total_positive_votes / nodes_info[counter].total_group_votes
  var r = percentage * (ageMaxRadius + 1);
  var d = {
        age: nodes_info[counter].age,
        group: nodes_info[counter].group,
        total_group_votes: nodes_info[counter].total_group_votes,
        votes_percentage: Math.floor(percentage * 100),
        cluster: i,
        radius: r,
        x: Math.cos(i / m * 2 * Math.PI) * 200 + ageWidth / 2 + Math.random(),
        y: Math.sin(i / m * 2 * Math.PI) * 200 + ageHeight / 2 + Math.random()
      };

  counter += 1
  if (!clusters[i] || (r > clusters[i].radius)) clusters[i] = d;
  return d
});

var force = d3.layout.force()
    .nodes(nodes)
    .size([ageWidth, ageHeight])
    .gravity(.02)
    .charge(0)
    .on("tick", ageTick)
    .start();

var svg = d3.select(".agedisplay").append("svg")
    .attr("width", ageWidth)
    .attr("height", ageHeight);

var node = svg.selectAll("circle")
    .data(nodes)
    .enter().append("circle")
    .style("fill", function(d) { return color(d.cluster); })
    .on("mouseover", myMouseOverFunction)
    .on("mouseout", myMouseOutFunction)
    .call(force.drag);

node.transition()
    .duration(750)
    .delay(function(d, i) { return i * 5; })
    .attrTween("r", function(d) {
      var i = d3.interpolate(0, d.radius);
      return function(t) { return d.radius = i(t); };
    });

function ageTick(e) {
  node
      .each(cluster(10 * e.alpha * e.alpha))
      .each(collide(.5))
      .attr("cx", function(d) { return d.x; })
      .attr("cy", function(d) { return d.y; });
}

// Move d to be adjacent to the cluster node.
function cluster(alpha) {
  return function(d) {
    var cluster = clusters[d.cluster];
    if (cluster === d) return;
    var x = d.x - cluster.x,
        y = d.y - cluster.y,
        l = Math.sqrt(x * x + y * y),
        r = d.radius + cluster.radius;
    if (l != r) {
      l = (l - r) / l * alpha;
      d.x -= x *= l;
      d.y -= y *= l;
      cluster.x += x;
      cluster.y += y;
    }
  };
}

// Resolves collisions between d and all other circles.
function collide(alpha) {
  var quadtree = d3.geom.quadtree(nodes);
  return function(d) {
    var r = d.radius + ageMaxRadius + Math.max(agePadding, ageClusterPadding),
        nx1 = d.x - r,
        nx2 = d.x + r,
        ny1 = d.y - r,
        ny2 = d.y + r;
    quadtree.visit(function(quad, x1, y1, x2, y2) {
      if (quad.point && (quad.point !== d)) {
        var x = d.x - quad.point.x,
            y = d.y - quad.point.y,
            l = Math.sqrt(x * x + y * y),
            r = d.radius + quad.point.radius + (d.cluster === quad.point.cluster ? agePadding : ageClusterPadding);
        if (l < r) {
          l = (l - r) / l * alpha;
          d.x -= x *= l;
          d.y -= y *= l;
          quad.point.x += x;
          quad.point.y += y;
        }
      }
      return x1 > nx2 || x2 < nx1 || y1 > ny2 || y2 < ny1;
    });
  };
}

// --------- ITEM FORCE PLOT --------
// description display on mouseover
var nodeMouseOver = function() {
  var itemNode = d3.select(this);
  d3.select(".itembox")
    .style("display", "block");
  d3.select("#visual-object-info")
    .text("" + this.__data__.item + " has " + this.__data__.val + " votes, with " + Math.round(((this.__data__.pos) / (this.__data__.val)) * 100) + "% positive.");
}
// description display removed
var nodeMouseOut = function() {
  var itemNode = d3.select(this);
  d3.select(".itembox").style("display", "none");
}
// raw data
var rawEdges = <%= raw @visedges %>
// data manipulation
rawEdges.forEach(function(d){
  d.source = +d.source;
  d.target = +d.target;
});
// dataset for visual
var itemDataSet = {
  nodes: <%= raw @visnodes %>,
  edges: rawEdges
};
// canvas size
var itemWidth = 320
var itemHeight = 300
// color design
d3.scale.categorySS = function() {
  return d3.scale.ordinal().range(
    ssColors);
}
var ssColors = ["#f7fcb9","#addd8e","#31a354","#ffffcc","#c2e699","#78c679","#238443","#ffffcc","#c2e699","#78c679","#31a354","#006837","#ffffcc","#d9f0a3","#addd8e","#78c679","#31a354","#006837","#ffffcc","#d9f0a3","#addd8e","#78c679","#41ab5d","#238443","#005a32","#ffffe5","#f7fcb9","#d9f0a3","#addd8e","#78c679","#41ab5d","#238443","#005a32","#ffffe5","#f7fcb9","#d9f0a3","#addd8e","#78c679","#41ab5d","#238443","#006837","#004529"];

var itemColor = d3.scale.categorySS();
// create canvas
var itemSvg = d3.select(".itemdisplay").append("svg")
    .attr("width", itemWidth)
    .attr("height", itemHeight);
// create force layout
var itemForce = d3.layout
                  .force()
                  .nodes(itemDataSet.nodes)
                  .links(itemDataSet.edges)
                  .size([itemWidth, itemHeight])
                  .linkDistance([20])
                  .charge([-150])
                  .start();
// define edges
var itemEdges = itemSvg.selectAll("line")
                .data(itemDataSet.edges)
                .enter()
                .append("line")
                .style("stroke", "#ffff00")
                .style("stroke-width", 1);
// define nodes
var itemNodes = itemSvg.selectAll("circle")
                .data(itemDataSet.nodes)
                .enter()
                .append("circle")
                .attr("r", function(d){ return d.val * 4;})
                .on("mouseover", nodeMouseOver)
                .on("mouseout", nodeMouseOut)
                .style("fill", function(d) { return itemColor((d.pos / d.val) * 100); })
                .text(function(d) {return d.item})
                .call(itemForce.drag);
// connect nodes with edges
itemForce.on("tick", function() {

  itemEdges.attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { return d.source.y; })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { return d.target.y; });

  itemNodes.attr("cx", function(d) { return d.x; })
        .attr("cy", function(d) { return d.y; });
});
</script>