<div class="restaurant_container">
	<h1><%= @restaurant.name %> </h1>

	<div id="tab-container" class="tab-container">
	  <ul class='tab-bar'>
	    <li class='tab'><a href="#menu-tab">Menu</a></li>
	    <li class='tab'><a href="#profile-tab">Profile</a></li>
	  </ul>
	  <div id="menu-tab">
	    <h2>Menu</h2>
	    <% @items.each do |item| %>
			  <%= div_for(item) do %>
			    <p><%= item.name %></p>
			    <div class="votes">
			      <!-- CLEAN THIS SEND LOGIC TO CONTROLER -->
			      <%= link_to '', votes_path(direction: 'up', item_id: item.id), remote: true, method: 'post', id: 'upvote', class: 'ss-like' %>
			      <span class="vote-holder"> <%= ((item.votes.where(direction: 'up').count / item.votes.count.to_f)*100).round %>%</span>
			      <%= link_to '', votes_path(direction: 'down', item_id: item.id), remote: true, method: 'post', id: 'downvote', class: 'ss-dislike'%>
			    </div>
			  <% end %>
			<% end %>
	  </div>
	  
	  <div id="profile-tab">
	    <h2>Profile</h2>
	    <p>Age Grouping Visualizations Placeholder</p>
	    <div class="display"></div>
	  
	  </div>
	</div>
</div>

<script type="text/javascript">
  $(document).ready(function(){ $('#tab-container').easytabs(); });
</script>

<script type="text/javascript">

var width = 280,
    height = 200,
    padding = 1.5, // separation between same-color nodes
    clusterPadding = 6, // separation between different-color nodes
    maxRadius = 6;

var n = 100, // total number of nodes
    m = 5; // number of distinct clusters

var color = d3.scale.category10()
    .domain(d3.range(m));

// The largest node for each cluster.
var clusters = new Array(m);

var nodes = d3.range(n).map(function() {
  var i = Math.floor(Math.random() * m),
      r = Math.sqrt((i + 1) / m * -Math.log(Math.random())) * maxRadius,
      d = {
        cluster: i,
        radius: r,
        x: Math.cos(i / m * 2 * Math.PI) * 200 + width / 2 + Math.random(),
        y: Math.sin(i / m * 2 * Math.PI) * 200 + height / 2 + Math.random()
      };
  if (!clusters[i] || (r > clusters[i].radius)) clusters[i] = d;
  return d;
});

var force = d3.layout.force()
    .nodes(nodes)
    .size([width, height])
    .gravity(.02)
    .charge(0)
    .on("tick", tick)
    .start();

var svg = d3.select(".display").append("svg")
    .attr("width", width)
    .attr("height", height);

var node = svg.selectAll("circle")
    .data(nodes)
  .enter().append("circle")
    .style("fill", function(d) { return color(d.cluster); })
    .call(force.drag);

node.transition()
    .duration(750)
    .delay(function(d, i) { return i * 5; })
    .attrTween("r", function(d) {
      var i = d3.interpolate(0, d.radius);
      return function(t) { return d.radius = i(t); };
    });

function tick(e) {
  node
      .each(cluster(10 * e.alpha * e.alpha))
      .each(collide(.5))
      .attr("cx", function(d) { return d.x; })
      .attr("cy", function(d) { return d.y; });
}

// Move d to be adjacent to the cluster node.
function cluster(alpha) {
  return function(d) {
    var cluster = clusters[d.cluster];
    if (cluster === d) return;
    var x = d.x - cluster.x,
        y = d.y - cluster.y,
        l = Math.sqrt(x * x + y * y),
        r = d.radius + cluster.radius;
    if (l != r) {
      l = (l - r) / l * alpha;
      d.x -= x *= l;
      d.y -= y *= l;
      cluster.x += x;
      cluster.y += y;
    }
  };
}

// Resolves collisions between d and all other circles.
function collide(alpha) {
  var quadtree = d3.geom.quadtree(nodes);
  return function(d) {
    var r = d.radius + maxRadius + Math.max(padding, clusterPadding),
        nx1 = d.x - r,
        nx2 = d.x + r,
        ny1 = d.y - r,
        ny2 = d.y + r;
    quadtree.visit(function(quad, x1, y1, x2, y2) {
      if (quad.point && (quad.point !== d)) {
        var x = d.x - quad.point.x,
            y = d.y - quad.point.y,
            l = Math.sqrt(x * x + y * y),
            r = d.radius + quad.point.radius + (d.cluster === quad.point.cluster ? padding : clusterPadding);
        if (l < r) {
          l = (l - r) / l * alpha;
          d.x -= x *= l;
          d.y -= y *= l;
          quad.point.x += x;
          quad.point.y += y;
        }
      }
      return x1 > nx2 || x2 < nx1 || y1 > ny2 || y2 < ny1;
    });
  };
}






// ---- FEMALE/MALE CHART ----
// var dataset = [20, 40]

// var cw = 280;
// var ch = 100;

// var cir_svg = d3.select(".display")
// 								.append("svg")
// 								.attr("width", cw)
// 								.attr("height", ch);

// var circles = cir_svg.selectAll("circle")
// 											.data(dataset)
// 											.enter()
// 											.append("circle")
// 											.text("test");

// circles.attr("cx", function(d, i) {
// 	return (i * 75) + 100;
// }).attr("cy", ch / 2)
// 	.attr("r", function(d) {
// 	return d;
// }).attr("fill", "blue")
// 	.attr("stroke", "purple")
// 	.attr("stroke-width", 2)
// 	;

// var text = cir_svg.selectAll("text")
// 				.data(dataset)
// 				.enter()
// 				.append("text")
// 				.text(function(d) {
// 					return d;
// 				})
// 				.attr("x", function(d, i) {
// 					return i * (cw / dataset.length);
// 				})
// 				.attr("y", function(d) {
// 					return ch - (d * 4);
// 				})
</script>





